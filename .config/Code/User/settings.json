{
  "workbench.colorCustomizations": {
    "panel.border": "#f1f1f1f1",
    "editorGroup.border": "#f1f1f1f1",
    "sideBar.border": "#f1f1f1f1",
    "activityBar.border": "#f1f1f1f1",
    "titleBar.border": "#f1f1f1f1",
    "statusBar.border": "#f1f1f1f1",
    "editorGroupHeader.tabsBorder": "#f1f1f1f1",
    "tab.border": "#f1f1f1f1",
    "tab.unfocusedHoverBorder": "#f1f1f1f1",

    "editorRuler.foreground": "#f1f1f109",

    "tab.activeBorder": "#1e1e1e",
    "tab.hoverBorder": "default",
    "tab.inactiveBackground": "#282828",
    "editor.background": "#1e1e1e",
    "editorGutter.background": "#1e1e1e",
    "tab.activeBackground": "#1e1e1e",
    "terminal.background": "#1e1e1e",
    "toolbar.activeBackground": "#1e1e1e",
    "statusBar.background": "#1e1e1e",
    "titleBar.activeBackground": "#1e1e1e",
    "panel.background": "#1e1e1e",
    "editorGroupHeader.tabsBackground": "#1e1e1e",
    "sideBar.background": "#1e1e1e",
    "sideBarSectionHeader.background": "#1e1e1e",
    "activityBar.background": "#1e1e1e"
  },

  // "workbench.colorCustomizations": {
  //   "panel.border": "#1e1e1e",
  //   "editorGroup.border": "#1e1e1e",
  //   "sideBar.border": "#1e1e1e",
  //   "activityBar.border": "#1e1e1e",
  //   "titleBar.border": "#1e1e1e",
  //   "statusBar.border": "#1e1e1e",
  //   "editorGroupHeader.tabsBorder": "#1e1e1e",
  //   "tab.border": "#1e1e1e",
  //   "tab.unfocusedHoverBorder": "#1e1e1e",

  //   // "editorRuler.foreground": "#f1f1f109",

  //   // "tab.activeBorder": "#1e1e1e",
  //   // "tab.hoverBorder": "default",
  //   // "tab.inactiveBackground": "#282828",
  //   // "editor.background": "#1e1e1e",
  //   // "editorGutter.background": "#1e1e1e",
  //   // "tab.activeBackground": "#1e1e1e",
  //   // "terminal.background": "#1e1e1e",
  //   // "toolbar.activeBackground": "#1e1e1e",
  //   // "statusBar.background": "#1e1e1e",
  //   // "titleBar.activeBackground": "#1e1e1e",
  //   // "panel.background": "#1e1e1e",
  //   // "editorGroupHeader.tabsBackground": "#1e1e1e",
  //   // "sideBar.background": "#1e1e1e",
  //   // "sideBarSectionHeader.background": "#1e1e1e",
  //   // "activityBar.background": "#1e1e1e"
  // },

  "window.titleBarStyle": "custom",
  "window.customTitleBarVisibility": "auto",
  "editor.fontFamily": "'JetGraph Nerd Font', 'monospace', monospace",
  // "editor.fontFamily": "'Maple Mono NF', 'monospace', monospace",
  "editor.fontSize": 16,
  // "editor.fontWeight": "600",
  "editor.fontWeight": "600",
  "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font",
  "terminal.integrated.fontSize": 15,
  "terminal.integrated.fontWeight": "600",
  "terminal.integrated.lineHeight": 1.0,
  "editor.tabSize": 2,
  "editor.linkedEditing": true,
  "editor.fontLigatures": true,
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": [
          "comment",
          "variable.language"
          // "meta.type.annotation",
          // "meta.return.type",
        ],
        "settings": {
          "fontStyle": "italic"
        }
      }
    ]
  },
  "editor.minimap.enabled": false,
  "editor.inlayHints.enabled": "offUnlessPressed",
  "editor.rulers": [90],
  "typescript.inlayHints.parameterNames.enabled": "literals",
  // Golang
  "gopls": {
    "ui.semanticTokens": true
  },
  "go.inlayHints.compositeLiteralFields": true,
  "go.inlayHints.compositeLiteralTypes": true,
  "go.inlayHints.functionTypeParameters": true,
  "go.inlayHints.parameterNames": true,
  "go.inlayHints.rangeVariableTypes": true,
  "go.inlayHints.constantValues": true,
  "indentRainbow.includedLanguages": ["html", "handlebars"],
  "cSpell.userWords": [
    "acousticness",
    "amqb",
    "Aylur",
    "binde",
    "bpytop",
    "brightnessctl",
    "capslock",
    "chakra",
    "chatterino",
    "danceability",
    "dbgate",
    "deepseek",
    "dmenu",
    "dotenv",
    "drun",
    "Encrypter",
    "esbenp",
    "fcitx",
    "fuzzel",
    "genai",
    "godoc",
    "gopls",
    "gorm",
    "hotplug",
    "hypr",
    "hyprctl",
    "hyprcursor",
    "hypridle",
    "hyprland",
    "hyprlang",
    "hyprpanel",
    "hyprpaper",
    "hyprpicker",
    "hyprprop",
    "instrumentalness",
    "keymap",
    "langchain",
    "monokai",
    "Msgf",
    "neverthrow",
    "nodenext",
    "oapi",
    "pgrep",
    "precmd",
    "pulumi",
    "pydantic",
    "pypr",
    "pyprland",
    "rabbitmq",
    "Reauth",
    "socat",
    "speechiness",
    "swww",
    "tofi",
    "tursodatabase",
    "typesafe",
    "uncolorize",
    "unfollowed",
    "uuidv",
    "Valorant",
    "VITE",
    "webelement",
    "wofi",
    "wpctl",
    "XAUTHORITY",
    "xcursor",
    "xrgb",
    "xwininfo"
  ],
  "color-highlight.markerType": "dot-before",
  "[python]": {
    "editor.tabSize": 4,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "ms-python.black-formatter"
  },
  "editor.renderWhitespace": "selection",
  // "[json][jsonc][css][typescriptreact][typescript]": {
  //   "editor.defaultFormatter": "biomejs.biome"
  // },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // tailwind
  "files.associations": {
    "*.css": "tailwindcss",
    "Makefile": "makefile"
  },
  // "editor.quickSuggestions": {
  //   "strings": "on"
  // },
  // "tailwindCSS.experimental.classRegex": [
  //   ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
  //   ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  // ],
  "github.copilot.advanced": {
    "authProvider": "github"
  },
  "discord.suppressNotifications": true,
  "cSpell.languageSettings": [
    {
      "languageId": "hyprlang",
      "allowCompoundWords": true,
      "dictionaries": ["bash", "css"],
      "words": [
        "bindm",
        "bindl",
        // "hypr",
        "movetoworkspace",
        "movetoworkspacesilent",
        "popin",
        "windowrulev2"
      ],
      "ignoreWords": ["hypr"]
    },
    {
      "languageId": "go",
      "allowCompoundWords": true,
      "words": ["joho", "godotenv", "gomail"]
    },
    {
      "languageId": "shellscript",
      "allowCompoundWords": true
    }
  ],
  "workbench.iconTheme": "symbols",
  "redhat.telemetry.enabled": false,
  "[typescript]": {
  
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb",
    "*.sqlite": "${capture}.${extname}-*",
    "*.db": "${capture}.${extname}-*",
    "*.sqlite3": "${capture}.${extname}-*",
    "*.db3": "${capture}.${extname}-*",
    "*.sdb": "${capture}.${extname}-*",
    "*.s3db": "${capture}.${extname}-*"
  },
  "todo-tree.general.showActivityBarBadge": true,
  "[yaml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "pulumi-lsp.detectExtensionConflicts": false,
  "tailwind-fold.autoFold": false,
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "problems.visibility": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "scminput": false
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "tailwindRainbow.languages": [
    "html",
    "javascript",
    "typescript",
    "javascriptreact",
    "typescriptreact",
    "vue",
    "svelte",
    "astro",
    "php"
  ],
  "workbench.colorTheme": "Vesper",
  "python.analysis.typeCheckingMode": "standard",
  "github.copilot.chat.newWorkspaceCreation.enabled": true,
  "github.copilot.chat.codesearch.enabled": true,
  "openapi.platformUrl": "https://platform.42crunch.com",
  "openapi.platformAuthType": "anond-token",
  "openapi.securityAuditToken": "",
  "openapi.platformServices": "",
  "openapi.platformScandManager": {
    "url": "",
    "auth": "none",
    "timeout": 300,
    "header": {
      "name": "",
      "value": ""
    }
  },
  "openapi.docker": {
    "replaceLocalhost": true,
    "useHostNetwork": true
  },
  "openapi.platformAuditRuntime": "platform",
  "openapi.platformConformanceScanRuntime": "cli",
  "openapi.platformConformanceScanImage": "42crunch/scand-agent:v2",
  "openapi.platformRepository": "https://repo.42crunch.com/downloads",
  "openapi.cliDirectoryOverride": "",
  "openapi.platformTemporaryCollectionName": "IDE Temp Collection",
  "openapi.platformMandatoryTags": "",
  "openapi.internalFeatures": false,
  "openapi.internalUseDevEndpoints": false,
  "openapi.approvedHostnames": [],
  "[markdown]": {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    },
    "cSpell.fixSpellingWithRenameProvider": true,
    "cSpell.advanced.feature.useReferenceProviderWithRename": true,
    "cSpell.advanced.feature.useReferenceProviderRemove": "/^#+\\s/"
  },
  "mcp": {
    "inputs": [],
    "servers": {
      "Context7": {
        "type": "stdio",
        "command": "bunx",
        "args": ["-y", "@upstash/context7-mcp@latest"]
      }
    }
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "prettify-ts.enabled": false,
  "workbench.sideBar.location": "right",
  "workbench.productIconTheme": "material-product-icons",
  "todo-tree.highlights.customHighlight": {
    "TODO": {
      "background": "#f59e0b",
      "foreground": "#fafafa"
    },
    "FIXME": {
      "background": "#ef4444",
      "foreground": "#fafafa"
    }
  },
  "workbench.editor.enablePreview": false,
  "[csharp]": {
    "editor.defaultFormatter": "csharpier.csharpier-vscode"
  },
  "csharpier.enableDiagnostics": false,
  "dotnet.testWindow.disableAutoDiscovery": true,
  "dotnet.preferVisualStudioCodeFileSystemWatcher": true,
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Follow the Conventional Commits format strictly for commit messages. Use the structure below:\n\n```\n<type>[optional scope]: <description>\n\n[optional body]\n```\n\nGuidelines:\n\n1. **Type and Scope**: Choose an appropriate type (e.g., `feat`, `fix`) and optional scope to describe the affected module or feature.\n\n2. **Description**: Write a concise, informative description in the header; use backticks if referencing code or specific terms.\n\n3. **Body**: The body is optional. \n   - For very small or self-explanatory changes, the body can be omitted entirely.\n   - If the change requires further explanation, provide a concise body.\n   - Use bullet points (`*`) for clarity if listing multiple points or details.\n   - Briefly describe the motivation, context, or technical details if they aren't obvious from the description and the change isn't trivial.\n\nCommit messages should be clear, informative, and professional, aiding readability and project tracking."
    }
  ],
  "git.autofetch": true,
  "files.watcherExclude": {
    "**/node_modules/*/**": true
  },
  // "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
  //   {
  //     "text": "Follow these guidelines and use the provided template structure when generating Pull Request (PR) descriptions. The goal is to create clear, informative, and reviewer-friendly PRs that provide necessary context without being overly verbose, especially for minor changes.\n\n**Guidelines for Generating Pull Request Descriptions:**\n\n1.  **PR Title is Key**:\n    *   The PR title should be concise and descriptive, similar to a good commit message subject line (e.g., `feat(auth): implement OTP login` or `fix(ui): correct button alignment on profile page`).\n    *   If the PR is small and the title is self-explanatory (e.g., `docs: fix typo in README`), the body can be very brief or even just link to an issue.\n\n2.  **Use the Provided PR Template Structure**:\n    *   Fill out the sections of the PR template relevant to the changes.\n    *   **Not all sections are mandatory for every PR.** Use judgment. For very small PRs, many sections can be omitted or kept extremely brief.\n\n3.  **Purpose / Description (`### 🎯 Purpose / Description`)**:\n    *   **Why was this change made?** What problem does it solve, or what feature does it add?\n    *   Link to relevant issues, tickets, or user stories (e.g., `Closes #123`, `Addresses JIRA-456`).\n    *   **For small PRs**: If the title and linked issue clearly convey the purpose, this section can be very short (e.g., \"Addresses issue #123 by updating the validation logic.\") or even \"As per #123.\"\n\n4.  **Changes Made (`### ✨ Changes Made`)**:\n    *   Provide a **high-level summary** of the changes. Bullet points are preferred for readability.\n    *   Focus on *what* was changed from a functional or architectural perspective, not a line-by-line code explanation.\n    *   **For small PRs**: This might be a single bullet point or even omitted if the \"Purpose\" and code diff are sufficiently clear.\n\n5.  **How to Test / Verify (`### 🧪 How to Test / Verify`)**:\n    *   Provide clear, step-by-step instructions for reviewers to test and verify the changes.\n    *   Include any necessary setup or specific data required.\n    *   **For small PRs (e.g., non-functional changes, documentation, simple bug fixes with obvious verification)**: This section might be \"N/A\" or \"Verify the updated documentation\" or \"Run unit tests.\"\n\n6.  **Screenshots / GIFs (`### 📸 Screenshots / GIFs (if applicable)`)**:\n    *   **Crucial for UI changes.** Include before/after screenshots or GIFs.\n    *   Omit if not applicable.\n\n7.  **Checklist (`### ☑️ Checklist (Optional but Recommended)`)**:\n    *   A self-review checklist for the author and a quick check for reviewers.\n    *   Customize based on project needs.\n\n8.  **Notes for Reviewers (`### 🗒️ Notes for Reviewers (Optional)`)**:\n    *   Use for specific points for reviewers: alternatives considered, known limitations, questions.\n    *   **For small PRs**: Likely not needed unless there's a subtle point.\n\n**General Guidelines for PR Descriptions:**\n\n*   **Be Reviewer-Centric**: Write for the reviewer.\n*   **Conciseness is Valued**: Provide enough info, but avoid excessive detail.\n*   **Professional Tone**: Maintain a respectful tone.\n*   **Use Markdown**: For formatting and readability.\n*   **Proofread**: Check for typos and clarity.\n\n---\n\n**Suggested Pull Request Template (to be used as a base for generation):**\n\n```markdown\n<!--\nThank you for your contribution!\nPlease provide a clear and concise description of your changes.\nNot all sections are required for every PR; use your judgment.\nFor small changes, a good title and a link to the issue might be sufficient.\n-->\n\n### 🎯 Purpose / Description\n<!--\nWhat is the goal of this PR? What problem does it solve or feature does it add?\nLink to relevant issues: e.g., Closes #123, Addresses JIRA-456\nFor small PRs, if the title and linked issue are clear, keep this brief.\n-->\n\n\n### ✨ Changes Made\n<!--\nProvide a high-level summary of the changes. Bullet points are preferred.\n-\n-\nFor small PRs, this might be a single point or omitted if obvious.\n-->\n\n\n### 🧪 How to Test / Verify\n<!--\nProvide clear, step-by-step instructions for reviewers.\nInclude any necessary setup or specific data.\n1.\n2.\n3.\nFor small/obvious changes, this might be \"N/A\" or very brief.\n-->\n\n\n### 📸 Screenshots / GIFs (if applicable)\n<!--\nInclude before/after screenshots or GIFs for UI changes.\nDelete this section if not applicable.\n-->\n\n---\n\n### ☑️ Checklist (Optional but Recommended)\n<!--\nPut an `x` in all the boxes that apply.\n-->\n- [ ] My code follows the project's coding standards and style guide.\n- [ ] I have added relevant tests to cover my changes.\n- [ ] All new and existing tests pass.\n- [ ] I have updated the documentation accordingly.\n- [ ] I have performed a self-review of my own code.\n- [ ] I have linked this PR to the relevant issue(s).\n\n### 🗒️ Notes for Reviewers (Optional)\n<!--\nAnything specific you want to draw the reviewer's attention to?\ne.g., trade-offs made, areas of concern, specific feedback requested.\n-->\n```\n"
  //   }
  // ]
}
